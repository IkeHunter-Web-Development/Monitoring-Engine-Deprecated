import swaggerAutogen from 'swagger-autogen'
import { eventResponse, eventBody, registerEventBody } from './api/event.doc'
import { monitorBody, monitorResponse, monitorResponseDetailed } from './api/monitor.doc'
import { HOST, PORT } from 'src/config'
import 'dotenv/config'

const host = HOST !== '0.0.0.0' ? HOST : 'localhost'
const outputFile = 'src/docs/swagger_output.json'
const endpointsFiles = ['src/routes/index.ts']

swaggerAutogen({ openapi: '3.0.0' })
const doc = {
  info: {
    version: '0.1.0',
    title: 'Monitor Engine API',
    description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.'
  },
  host: `${host}:${PORT}`,
  schemes: ['http', 'https'],
  consumes: ['application/json'],
  produces: ['application/json'],
  servers: [
    {
      url: 'http://localhost:8000',
      description: 'Local server'
    }
  ],

  tags: [
    {
      name: 'Monitor',
      description: 'Endpoints for monitoring websites'
    },
    {
      name: 'Events',
      description: 'Endpoints for viewing events'
    },
    {
      name: 'Main',
      description: 'Endpoints for general API functionality'
    }
  ],

  securityDefinitions: {
    bearerAuth: {
      type: 'apiKey',
      name: 'Authorization',
      in: 'header',
      description: 'Token used to authenticate with network.'
    }
  },

  definitions: {
    MonitorBody: { ...monitorBody },
    EventBody: { ...eventBody },
    RegisterEventBody: { ...registerEventBody },
    MonitorResponse: { ...monitorResponse },
    EventResponse: { ...eventResponse },
    MonitorResponseDetailed: { ...monitorResponseDetailed },

    Error500: {
      status: 500,
      message: 'Error message...'
    },
    Error404: {
      status: 404,
      message: 'Error message...'
    }
  }
}

export const initializeSwagger = (): void => {
  swaggerAutogen(outputFile, endpointsFiles, doc)
}

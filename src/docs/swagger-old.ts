// const swaggerAutogen = require('swagger-autogen')()
// const swaggerAutogen = require("swagger-autogen")({ openapi: "3.0.0" });

import { createMonitor, createMonitorBody, monitorBody } from "./api/monitor.doc.js";
// const { createMonitor, createMonitorBody, monitorBody } = require("./api/monitor.doc.ts");
import swaggerAutogen from "swagger-autogen";
swaggerAutogen({ openapi: "3.0.0"});

// const outputFile = "/src/swagger/swagger_output.json";
const outputFile = "./swagger_output.json";

const endpointsFiles = [
  // "../server.ts",
  "../router.ts",
  // "../controllers/*",
  "../controllers/event.controller.ts",
  "../controllers/monitor.controller.ts",
  "../controllers/main.controller.ts",
];

const doc = {
  // definition: {
  //   openapi: "3.0.0",
  //   info: {
  //     title: "Monitor Engine API Test",
  //     version: "0.1.0",
  //   },
  //   servers: [
  //     {
  //       url: "http://localhost:8000",
  //       description: "Local server",
  //     },
  //   ],

  // },
  // apis: [
  //   "./router.ts",
  //   "./controllers/event.controller.ts",
  //   "./controllers/monitor.controller.ts",
  //   "./controllers/main.controller.ts",
  // ],
  info: {
    version: "0.1.0",
    title: "Monitor Engine API",
    description: "Documentation automatically generated by the <b>swagger-autogen</b> module.",
  },
  host: `${process.env.HOST}:${process.env.PORT}}`,
  basePath: "/",
  schemes: ["http", "https"],
  consumes: ["application/json"],
  produces: ["application/json"],
  servers: [
    {
      url: "http://localhost:8000",
      description: "Local server",
    },
  ],
  paths: {
    // monitors: { post: createMonitor },
  },

  tags: [
    {
      name: "Monitor",
      description: "Endpoints for monitoring websites",
    },
    {
      name: "Events",
      description: "Endpoints for viewing events",
    },
    {
      name: "Main",
      description: "Endpoints for general API functionality",
    },
  ],
  components: {
    securitySchemes: {
      Bearer: {
        type: "http",
        scheme: "bearer",
        bearerFormat: "JWT",
        in: "header",
      },
    },
    schemas: {
      // Monitor: { ...monitorBody },
      // CreateMonitorBody: { ...createMonitorBody },
    },
  },
  security: [
    {
      Bearer: [],
    },
  ],
  definitions: {
    Monitor: { ...monitorBody },
    // createMonitorBody,
    CreateMonitor: { ...createMonitor },
    CreateMonitorBody: {
      content: {
        "application/json": {
          type: "object",
          properties: {
            title: {
              example: "Example Monitor",
            },
            projectId: {
              example: "1234567",
            },
            url: {
              example: "https://ikehunter.com",
            },
            statusCode: {
              example: 200,
            },
            users: {
              example: [
                {
                  userId: "123456",
                  email: "user@example.com",
                },
              ],
            },
          },
        },
      },
    },
  },
};

swaggerAutogen(outputFile, endpointsFiles, doc);

image: docker:19.03.5
services:
  - docker:19.03.5-dind

stages:
  - Build
  - Push
  - Deploy

before_script:
  - apk add python3
  - pip3 install awscli==1.18.8
  - docker load --input data/image.tar
  - $(aws ecr get-login --no-include-email --region us-east-1)

Build Staging:
  stage: Build
  before_script: []
  script:
    - mkdir data/
    - docker build --compress -t proxy-engine .
    - docker save --output data/image.tar proxy-engine
  artifacts:
    name: image
    paths:
      - data/
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"

Build Production:
  stage: Build
  before_script: []
  script:
    - mkdir data/
    - docker build --compress -t proxy-engine .
    - docker save --output data/image.tar proxy-engine
  artifacts:
    name: image
    paths:
      - data/
  rules:
    - if: "$CI_COMMIT_BRANCH == 'production'"

Push Staging:
  stage: Push
  script:
    - docker tag proxy-engine $ECR_REPO:staging
    - docker push $ECR_REPO:staging
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"

Push Production:
  stage: Push
  script:
    - docker tag proxy-engine $ECR_REPO:production
    - docker push $ECR_REPO:production
  rules:
    - if: "$CI_COMMIT_BRANCH == 'production'"

Deploy Staging:
  stage: Deploy
  script:
    - echo Queueing new ECS service...
    - aws ecs update-service --cluster devsuite-staging-cluster --service devsuite-staging-main --force-new-deployment --region us-east-1
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"

Deploy Production:
  stage: Deploy
  script:
    - echo Queueing new ECS service...
    - aws ecs update-service --cluster devsuite-production-cluster --service devsuite-production-main --force-new-deployment --region us-east-1
  rules:
    - if: "$CI_COMMIT_BRANCH == 'production'"
      when: manual




